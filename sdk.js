
// WARNING: This file is automatically generated
// do not change it in place it would be overridden
// by the next build
'use strict';

/**
 * Esta API estabelece o vínculo inicial entre um cliente não-local ou um cliente local stand-alone
e o Ginga CC WebServices. Somente a partir do momento em que este vínculo é estabelecido, as demais
APIs (descritas em 8.2 a 8.7) podem ser utilizadas por esses clientes.

Produzida por Raphael Abreu, equipe UFF (raphael.s.abreu@midiacom.uff.br) 

 * @module API
 * @version 1.0.1
 */
const API = {
  dtvAuthorizeGet,
  dtvTokenGet,
  dtvCurrentserviceGet,
  dtvServicelistGet,
  dtvCurrentServicePost,
  dtvCurrentServiceAllComponentsGet,
  dtvCurrentServiceUniqueComponentGet,
  dtvCurrentServiceComponentTagPost,
  dtvServiceContextIdAppsGet,
  dtvServiceContextIdAppsGetAppId,
  dtvCurrentServiceAppsAppIdPost,
  dtvCurrentServiceAppsAppIdNodePropertiesNodeIdGet,
  dtvServiceContextIdAppsAppIdPersistentGet,
  dtvServiceContextIdAppsAppIdPersistentPost,
  dtvServiceContextIdGingaPersistentGet,
  dtvServiceContextIdGingaPersistentPost,
  dtvCurrentServiceGetFiles,
  dtvCurrentServiceDsmccFilesComponentTagCarouselIdGet,
  dtvCurrentServiceDsmccStreamEventsCarouselIdGet,
  dtvCurrentServiceDsmccStreamEventsHandleDelete,
  dtvCurrentServiceAppsGetNodes,
  dtvCurrentServiceAppsChangeDocumentidNode,
  dtvCurrentServiceAppsChangeNode,
  dtvCurrentServiceGingaKeysetPost,
  dtvCurrentServiceGingaKeysetGet,
  dtvCurrentServiceAppsEditDocumentidPost,
  dtvCurrentServiceAppsEditPost,
  dtvServiceContextIdInfoTimeGet,
  dtvServiceContextIdInfoNitGet,
  dtvServiceContextIdInfoSdtGet,
  dtvServiceContextIdInfoPatGet,
  dtvServiceContextIdInfoBatGet,
  dtvServiceContextIdInfoPmtGet,
  dtvServiceContextIdInfoEpgGet,
  dtvAllServicesInfoEpgGet,
  dtvServiceContextIdInfoBitGet,
  dtvCurrentServiceStreamPost,
  dtvMediaplayersGet,
  dtvMediaplayersplayerIdGet,
  dtvMediaplayersMediaplayerIdPost,
  dtvCurrentServiceStreamHandleDelete,
  dtvPlatformCapabilitiesGet,
  dtvDrmGet,
  dtvRegisterTargetPost,
  dtvTargetAppsTargetIdGet,
  dtvTargetAppsdGet,
  dtvTargetAppsPost,
  dtvDeepLinkTargetIdGet,
  dtvBindContextPost,
  dtvBindContextGet,
  dtvBindContextDelete,
  host: 'http://localhost:44642',
};


    
/**
 * Requisita o estado de autorizacao do cliente.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.clientid
 * Identificador do cliente.,
 * @param {string} parameters.displayName
 * Nome do cliente exibido no pop-up de autorizacao do usuário.,
 * @param {string} [parameters.pm]
 * Método de pareamento (conforme 7.3) para clientes não locais.,
 * @param {string} [parameters.kxp]
 * Algoritmo de geracao colaborativa de chave simétrica (opcional se pm=kex).,
 * @param {string} [parameters.key]
 * Chave parcial do lado do cliente (opcional se pm=kex).
 * @return {Object}
 * The HTTP response
 * @response 200
 * * Acesso via cliente local stand-alone: {"value":{"refreshToken":"<string>"}}
 * * Acesso via cliente não local, utilizando pareamento via leitura de código QR: {"value":{"challenge":"<base64-string>"}}
 * * Acesso via cliente não local, utilizando pareamento via PIN: {"value":{"challenge":"<base64-string>","key":"<base64-string>"}}
 * @response 404
 * * 101: {"value":{"error":101,"description":"Illegal argument value"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros passados com valor inválido, pertencentes a um dos seguintes tipos:  parâmetros posicionais (componentes da rota defnida na API);  parâmetros de query;  atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento considerado inválido deve ser listado ao fnal da string de descrição. Havendo mais de um argumento, estes devem ser separados por vírgula."}
 * * 102: {"value":{"error":102,"description":"Access not authorized by user"},"description":"Caso o processo de autorização e pareamento (feito por meio da API em 8.1.1) não tenha sido concluído com sucesso, ou o usuário tenha dado resposta negativa, ou uma anuência previamente concedida tenha sido posteriormente excluída (por meio do mecanismo descrito em 7.2.1). Outros casos de uso que possam requerer autorização imediata do usuário (por exemplo, 8.6.5) devem retornar este erro, caso a autorização seja negada."}
 * * 105: {"value":{"error":105,"description":"Missing argument"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros faltantes, pertencentes a um dos seguintes tipos: parâmetros posicionais (componentes da rota defnida na API); parâmetros de query; atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento identifcado como faltante deve ser listado ao fnal da string de descrição. Havendo mais de um, os argumentos devem ser separados por vírgula."}
 * * 106: {"value":{"error":106,"description":"API unavailable for this runtime environment"},"description":"Caso a API seja utilizada a partir de um tipo de cliente ao qual não está destinada. Por exemplo, quando uma API destinada a clientes locais associados é usada a partir de um cliente não local, ou de um cliente local stand-alone."}

 */
function dtvAuthorizeGet({
  clientid,
  displayName,
  pm,
  kxp,
  key,} = {},  options) {
      

  if( clientid == null) {
    throw new Error('Missing required parameter : clientid. Value : ' +  clientid);
  }

  if( displayName == null) {
    throw new Error('Missing required parameter : displayName. Value : ' +  displayName);
  }


  let urlParts = [
    'dtv',
    'authorize',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  if(clientid !== undefined) {
    data['clientid'] = clientid;
  }

  if(displayName !== undefined) {
    data['display-name'] = displayName;
  }

  if(pm !== undefined) {
    data['pm'] = pm;
  }

  if(kxp !== undefined) {
    data['kxp'] = kxp;
  }

  if(key !== undefined) {
    data['key'] = key;
  }
  let fetchWrapper = new FetchWrapper()
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Obtencao do token de acesso.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.clientid
 * Identificador do cliente.,
 * @param {string} [parameters.challengeResponse]
 * Resposta ao desafio (challenge) enviado pelo servidor na API.,
 * @param {string} [parameters.refreshToken]
 * Token de atualizacao utilizado em acessos subsequentes.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * accessToken: "<jwt-token>"
 * * tokenType: "Bearer"
 * * expiresIn: "<seconds>"
 * * refreshToken: "<string>"
 * * serverCert: "<X.509 cert>"
 * @response 404
 * * 101: {"value":{"error":101,"description":"Illegal argument value"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros passados com valor inválido, pertencentes a um dos seguintes tipos:  parâmetros posicionais (componentes da rota defnida na API);  parâmetros de query;  atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento considerado inválido deve ser listado ao fnal da string de descrição. Havendo mais de um argumento, estes devem ser separados por vírgula."}
 * * 102: {"value":{"error":102,"description":"Access not authorized by user"},"description":"Caso o processo de autorização e pareamento (feito por meio da API em 8.1.1) não tenha sido concluído com sucesso, ou o usuário tenha dado resposta negativa, ou uma anuência previamente concedida tenha sido posteriormente excluída (por meio do mecanismo descrito em 7.2.1). Outros casos de uso que possam requerer autorização imediata do usuário (por exemplo, 8.6.5) devem retornar este erro, caso a autorização seja negada."}
 * * 105: {"value":{"error":105,"description":"Missing argument"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros faltantes, pertencentes a um dos seguintes tipos: parâmetros posicionais (componentes da rota defnida na API); parâmetros de query; atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento identifcado como faltante deve ser listado ao fnal da string de descrição. Havendo mais de um, os argumentos devem ser separados por vírgula."}
 * * 106: {"value":{"error":106,"description":"API unavailable for this runtime environment"},"description":"Caso a API seja utilizada a partir de um tipo de cliente ao qual não está destinada. Por exemplo, quando uma API destinada a clientes locais associados é usada a partir de um cliente não local, ou de um cliente local stand-alone."}

 */
function dtvTokenGet({
  clientid,
  challengeResponse,
  refreshToken,} = {},  options) {
      

  if( clientid == null) {
    throw new Error('Missing required parameter : clientid. Value : ' +  clientid);
  }


  let urlParts = [
    'dtv',
    'token',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  if(clientid !== undefined) {
    data['clientid'] = clientid;
  }

  if(challengeResponse !== undefined) {
    data['challenge-response'] = challengeResponse;
  }

  if(refreshToken !== undefined) {
    data['refresh-token'] = refreshToken;
  }
  let fetchWrapper = new FetchWrapper()
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Retorna informações do serviço DTV selecionado

 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"serviceContextId":{"type":"string","description":"The context ID of the service."},"serviceName":{"type":"string","description":"The name of the service."},"transportStreamId":{"type":"integer","description":"The ID of the transport stream."},"originalNetworkId":{"type":"integer","description":"The original network ID."},"serviceId":{"type":"integer","description":"The ID of the service."}}
 * * required: ["serviceContextId","serviceName","transportStreamId","originalNetworkId","serviceId"]
 * @response 404
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 300: {"value":{"error":300,"description":"No DTV service currently in use"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas o receptor não esteja sintonizado em um serviço DTV no momento. Por exemplo, se sua entrada estiver confgurada como HDMI, USB etc., ou se outra função estiver se sobrepondo à sintonia e exibição do serviço DTV."}
 * * 302: {"value":{"error":302,"description":"No DTV signal"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas não haja recepção de sinal DTV."}

 */
function dtvCurrentserviceGet( bearerAuth, options) {
      


  let urlParts = [
    'dtv',
    'current-service',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * obtencao da lista dos serviços DTV disponíveis
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"serviceList":{"type":"array","items":{"type":"object","properties":{"serviceContextId":{"type":"string","description":"The context ID of the service."},"serviceName":{"type":"string","description":"The name of the service."},"transportStreamId":{"type":"integer","description":"The ID of the transport stream."},"originalNetworkId":{"type":"integer","description":"The original network ID."},"serviceId":{"type":"integer","description":"The ID of the service."}},"required":["serviceContextId","serviceName","transportStreamId","originalNetworkId","serviceId"]}}}
 * @response 404
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"}}
 * * 303: {"value":{"error":303,"description":"Empty channel list"}}

 */
function dtvServicelistGet( bearerAuth, options) {
      


  let urlParts = [
    'dtv',
    'service-list',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Seleciona o serviço identifcado pela tripla <service-context-id>.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.serviceContextId
 * The context ID of the service.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"serviceContextId":{"type":"string","description":"The context ID of the service."},"serviceName":{"type":"string","description":"The name of the service."},"transportStreamId":{"type":"integer","description":"The ID of the transport stream."},"originalNetworkId":{"type":"integer","description":"The original network ID."},"serviceId":{"type":"integer","description":"The ID of the service."}}
 * * required: ["serviceContextId","serviceName","transportStreamId","originalNetworkId","serviceId"]
 * @response 404
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 300: {"value":{"error":300,"description":"No DTV service currently in use"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas o receptor não esteja sintonizado em um serviço DTV no momento. Por exemplo, se sua entrada estiver confgurada como HDMI, USB etc., ou se outra função estiver se sobrepondo à sintonia e exibição do serviço DTV."}
 * * 302: {"value":{"error":302,"description":"No DTV signal"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas não haja recepção de sinal DTV."}

 */
function dtvCurrentServicePost({
  serviceContextId,} = {}, bearerAuth, options) {
      

  if( serviceContextId == null) {
    throw new Error('Missing required parameter : serviceContextId. Value : ' +  serviceContextId);
  }


  let urlParts = [
    'dtv',
    serviceContextId,
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.post('/'+urlParts.join('/'), headers, data)
}

    
/**
 * obtenção da lista dos componentes do serviço DTV atual
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"components":{"type":"array","items":{"type":"object","properties":{"streamContent":{"type":"string","description":"The ID of the service."},"componentType":{"type":"string","description":"The type of the component."},"componentTag":{"type":"string","description":"The tag of the component."},"ISO639languageCode":{"type":"string","description":"The ISO 639 language code."},"pid":{"type":"integer","description":"The process ID."},"state":{"type":"string","description":"The state of the process.","enum":["started","paused","stopped"]},"pos":{"type":"object","description":"The position of the process.","properties":{"x":{"type":"integer"},"y":{"type":"integer"},"w":{"type":"integer"},"h":{"type":"integer"}}},"vol":{"type":"integer","description":"The volume level."}}}}}
 * @response 404
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 300: {"value":{"error":300,"description":"No DTV service currently in use"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas o receptor não esteja sintonizado em um serviço DTV no momento. Por exemplo, se sua entrada estiver confgurada como HDMI, USB etc., ou se outra função estiver se sobrepondo à sintonia e exibição do serviço DTV."}
 * * 302: {"value":{"error":302,"description":"No DTV signal"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas não haja recepção de sinal DTV."}

 */
function dtvCurrentServiceAllComponentsGet( bearerAuth, options) {
      


  let urlParts = [
    'dtv',
    'current-service',
    'components',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * obtenção de informações de um componente do serviço DTV atual
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.compTag
 * Identificador da tag do componente.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"streamContent":{"type":"string","description":"The ID of the service."},"componentType":{"type":"string","description":"The type of the component."},"componentTag":{"type":"string","description":"The tag of the component."},"ISO639languageCode":{"type":"string","description":"The ISO 639 language code."},"pid":{"type":"integer","description":"The process ID."},"state":{"type":"string","description":"The state of the process.","enum":["started","paused","stopped"]},"pos":{"type":"object","description":"The position of the process.","properties":{"x":{"type":"integer"},"y":{"type":"integer"},"w":{"type":"integer"},"h":{"type":"integer"}}},"vol":{"type":"integer","description":"The volume level."}}
 * @response 404
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 300: {"value":{"error":300,"description":"No DTV service currently in use"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas o receptor não esteja sintonizado em um serviço DTV no momento. Por exemplo, se sua entrada estiver confgurada como HDMI, USB etc., ou se outra função estiver se sobrepondo à sintonia e exibição do serviço DTV."}
 * * 302: {"value":{"error":302,"description":"No DTV signal"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas não haja recepção de sinal DTV."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvCurrentServiceUniqueComponentGet({
  compTag,} = {}, bearerAuth, options) {
      

  if( compTag == null) {
    throw new Error('Missing required parameter : compTag. Value : ' +  compTag);
  }


  let urlParts = [
    'dtv',
    'current-service',
    compTag,
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Operação sobre um componente do serviço DTV atual
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {string} parameters.compTag
 * Identificador da tag do componente.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"streamContent":{"type":"string","description":"The ID of the service."},"componentType":{"type":"string","description":"The type of the component."},"componentTag":{"type":"string","description":"The tag of the component."},"ISO639languageCode":{"type":"string","description":"The ISO 639 language code."},"pid":{"type":"integer","description":"The process ID."},"state":{"type":"string","description":"The state of the process.","enum":["started","paused","stopped"]},"pos":{"type":"object","description":"The position of the process.","properties":{"x":{"type":"integer"},"y":{"type":"integer"},"w":{"type":"integer"},"h":{"type":"integer"}}},"vol":{"type":"integer","description":"The volume level."}}
 * @response 404
 * * 101: {"value":{"error":101,"description":"Illegal argument value"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros passados com valor inválido, pertencentes a um dos seguintes tipos:  parâmetros posicionais (componentes da rota defnida na API);  parâmetros de query;  atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento considerado inválido deve ser listado ao fnal da string de descrição. Havendo mais de um argumento, estes devem ser separados por vírgula."}
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 105: {"value":{"error":105,"description":"Missing argument"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros faltantes, pertencentes a um dos seguintes tipos: parâmetros posicionais (componentes da rota defnida na API); parâmetros de query; atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento identifcado como faltante deve ser listado ao fnal da string de descrição. Havendo mais de um, os argumentos devem ser separados por vírgula."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 200: {"value":{"error":200,"description":"Platform resource unavailable"},"description":"Caso o acesso a uma API não possa ser concretizado, por depender de um recurso que não está disponível. Por exemplo, requisição de controle de um exibidor de mídia (ver 8.5.4) quando todos os exibidores estão alocados no momento."}
 * * 300: {"value":{"error":300,"description":"No DTV service currently in use"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas o receptor não esteja sintonizado em um serviço DTV no momento. Por exemplo, se sua entrada estiver confgurada como HDMI, USB etc., ou se outra função estiver se sobrepondo à sintonia e exibição do serviço DTV."}
 * * 302: {"value":{"error":302,"description":"No DTV signal"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas não haja recepção de sinal DTV."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvCurrentServiceComponentTagPost({
      body,
  compTag,} = {}, bearerAuth, options) {
      

  if( compTag == null) {
    throw new Error('Missing required parameter : compTag. Value : ' +  compTag);
  }


  let urlParts = [
    'dtv',
    'current-service',
    compTag,
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = body;
    

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.post('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Obtenção da lista de aplicações interativas disponíveis em um serviço
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.serviceContextId
 * Identificador do contexto do serviço.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"apps":{"type":"array","items":{"type":"object","properties":{"appid":{"type":"string","description":"Identificador da aplicação."},"name":{"type":"string","description":"Nome da aplicação."},"type":{"type":"string","enum":["Ginga-HTML5","Ginga-NCL"],"description":"Tipo da aplicação."},"controlCode":{"type":"string","description":"Código de controle da aplicação."},"state":{"type":"string","enum":["running","stored","unloaded","loading","loaded"],"description":"Estado da aplicação."},"entryPoint":{"type":"string","description":"URL do ponto de entrada da aplicação."}}}}}
 * @response 404
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 304: {"value":{"error":304,"description":"DTV service not found"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas este contexto não se encontre na atual lista de canais do receptor."}

 */
function dtvServiceContextIdAppsGet({
  serviceContextId,} = {}, bearerAuth, options) {
      

  if( serviceContextId == null) {
    throw new Error('Missing required parameter : serviceContextId. Value : ' +  serviceContextId);
  }


  let urlParts = [
    'dtv',
    serviceContextId,
    'apps',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Obtenção de informações de uma aplicação interativa
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.serviceContextId
 * Identificador do contexto do serviço.,
 * @param {string} parameters.appid
 * Identificador da aplicação.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"appid":{"type":"string","description":"Identificador da aplicação."},"name":{"type":"string","description":"Nome da aplicação."},"type":{"type":"string","enum":["Ginga-HTML5","Ginga-NCL"],"description":"Tipo da aplicação."},"controlCode":{"type":"string","description":"Código de controle da aplicação."},"state":{"type":"string","enum":["running","stored","unloaded","loading","loaded"],"description":"Estado da aplicação."},"entryPoint":{"type":"string","description":"URL do ponto de entrada da aplicação."}}
 * @response 404
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 304: {"value":{"error":304,"description":"DTV service not found"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas este contexto não se encontre na atual lista de canais do receptor."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvServiceContextIdAppsGetAppId({
  serviceContextId,
  appid,} = {}, bearerAuth, options) {
      

  if( serviceContextId == null) {
    throw new Error('Missing required parameter : serviceContextId. Value : ' +  serviceContextId);
  }

  if( appid == null) {
    throw new Error('Missing required parameter : appid. Value : ' +  appid);
  }


  let urlParts = [
    'dtv',
    serviceContextId,
    'apps',
    appid,
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Controle de uma aplicação interativa
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {string} parameters.serviceContextId
 * Identificador do contexto do serviço.,
 * @param {string} parameters.appid
 * Identificador da aplicação.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"appid":{"type":"string","description":"Identificador da aplicação."},"name":{"type":"string","description":"Nome da aplicação."},"type":{"type":"string","enum":["Ginga-HTML5","Ginga-NCL"],"description":"Tipo da aplicação."},"controlCode":{"type":"string","description":"Código de controle da aplicação."},"state":{"type":"string","enum":["running","stored","unloaded","loading","loaded"],"description":"Estado da aplicação."},"entryPoint":{"type":"string","description":"URL do ponto de entrada da aplicação."}}
 * @response 404
 * * 101: {"value":{"error":101,"description":"Illegal argument value"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros passados com valor inválido, pertencentes a um dos seguintes tipos:  parâmetros posicionais (componentes da rota defnida na API);  parâmetros de query;  atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento considerado inválido deve ser listado ao fnal da string de descrição. Havendo mais de um argumento, estes devem ser separados por vírgula."}
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 105: {"value":{"error":105,"description":"Missing argument"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros faltantes, pertencentes a um dos seguintes tipos: parâmetros posicionais (componentes da rota defnida na API); parâmetros de query; atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento identifcado como faltante deve ser listado ao fnal da string de descrição. Havendo mais de um, os argumentos devem ser separados por vírgula."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 300: {"value":{"error":300,"description":"No DTV service currently in use"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas o receptor não esteja sintonizado em um serviço DTV no momento. Por exemplo, se sua entrada estiver confgurada como HDMI, USB etc., ou se outra função estiver se sobrepondo à sintonia e exibição do serviço DTV."}
 * * 302: {"value":{"error":302,"description":"No DTV signal"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas não haja recepção de sinal DTV."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}
 * * 401: {"value":{"error":401,"description":"Unsupported or invalid state transition"},"description":"Caso uma transição de estado requisitada a uma aplicação-alvo não seja válida, ou não possa ser realizada."}

 */
function dtvCurrentServiceAppsAppIdPost({
      body,
  serviceContextId,
  appid,} = {}, bearerAuth, options) {
      

  if( serviceContextId == null) {
    throw new Error('Missing required parameter : serviceContextId. Value : ' +  serviceContextId);
  }

  if( appid == null) {
    throw new Error('Missing required parameter : appid. Value : ' +  appid);
  }


  let urlParts = [
    'dtv',
    serviceContextId,
    'apps',
    appid,
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = body;
    

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.post('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Obtenção de propriedades definidas por uma aplicação interativa
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.appid
 * Identificador da aplicação.,
 * @param {string} parameters.nodeId
 * Identificador do nó.,
 * @param {string} [parameters.varName]
 * Nome da propriedade do nó.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * oneOf: [{"type":"object","properties":{"nodeProperties":{"type":"array","items":{"type":"object","properties":{"name":{"type":"string","description":"Nome da propriedade."},"value":{"type":"string","description":"Valor da propriedade."}}}}}},{"type":"string","description":"Valor da propriedade (quando var-name é especificado)."}]
 * @response 404
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 300: {"value":{"error":300,"description":"No DTV service currently in use"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas o receptor não esteja sintonizado em um serviço DTV no momento. Por exemplo, se sua entrada estiver confgurada como HDMI, USB etc., ou se outra função estiver se sobrepondo à sintonia e exibição do serviço DTV."}
 * * 302: {"value":{"error":302,"description":"No DTV signal"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas não haja recepção de sinal DTV."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvCurrentServiceAppsAppIdNodePropertiesNodeIdGet({
  appid,
  nodeId,
  varName,} = {}, bearerAuth, options) {
      

  if( appid == null) {
    throw new Error('Missing required parameter : appid. Value : ' +  appid);
  }

  if( nodeId == null) {
    throw new Error('Missing required parameter : nodeId. Value : ' +  nodeId);
  }


  let urlParts = [
    'dtv',
    'current-service',
    'apps',
    appid,
    'node-properties',
    nodeId,
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  if(varName !== undefined) {
    data['var-name'] = varName;
  }
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Leitura de valores persistidos por aplicações interativas
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.serviceContextId
 * Identificador do contexto do serviço.,
 * @param {string} parameters.appid
 * Identificador da aplicação.,
 * @param {string} [parameters.varName]
 * Nome da variável persistente.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * oneOf: [{"type":"object","properties":{"persistentData":{"type":"array","items":{"type":"object","properties":{"name":{"type":"string","description":"Nome da variável persistente."},"value":{"type":"string","description":"Valor da variável persistente."}}}}}},{"type":"string","description":"Valor da variável persistente (quando var-name é especificado)."}]
 * @response 404
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 300: {"value":{"error":300,"description":"No DTV service currently in use"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas o receptor não esteja sintonizado em um serviço DTV no momento. Por exemplo, se sua entrada estiver confgurada como HDMI, USB etc., ou se outra função estiver se sobrepondo à sintonia e exibição do serviço DTV."}
 * * 302: {"value":{"error":302,"description":"No DTV signal"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas não haja recepção de sinal DTV."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvServiceContextIdAppsAppIdPersistentGet({
  serviceContextId,
  appid,
  varName,} = {}, bearerAuth, options) {
      

  if( serviceContextId == null) {
    throw new Error('Missing required parameter : serviceContextId. Value : ' +  serviceContextId);
  }

  if( appid == null) {
    throw new Error('Missing required parameter : appid. Value : ' +  appid);
  }


  let urlParts = [
    'dtv',
    serviceContextId,
    'apps',
    appid,
    'persistent',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  if(varName !== undefined) {
    data['var-name'] = varName;
  }
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Escrita de valores na área de persistência de aplicações interativas
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {string} parameters.serviceContextId
 * Identificador do contexto do serviço.,
 * @param {string} parameters.appid
 * Identificador da aplicação.,
 * @param {string} parameters.varName
 * Nome da variável persistente.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"name":{"type":"string","description":"Nome da variável persistente."},"value":{"type":"string","description":"Valor da variável persistente."}}
 * @response 404
 * * 101: {"value":{"error":101,"description":"Illegal argument value"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros passados com valor inválido, pertencentes a um dos seguintes tipos:  parâmetros posicionais (componentes da rota defnida na API);  parâmetros de query;  atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento considerado inválido deve ser listado ao fnal da string de descrição. Havendo mais de um argumento, estes devem ser separados por vírgula."}
 * * 105: {"value":{"error":105,"description":"Missing argument"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros faltantes, pertencentes a um dos seguintes tipos: parâmetros posicionais (componentes da rota defnida na API); parâmetros de query; atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento identifcado como faltante deve ser listado ao fnal da string de descrição. Havendo mais de um, os argumentos devem ser separados por vírgula."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 200: {"value":{"error":200,"description":"Platform resource unavailable"},"description":"Caso o acesso a uma API não possa ser concretizado, por depender de um recurso que não está disponível. Por exemplo, requisição de controle de um exibidor de mídia (ver 8.5.4) quando todos os exibidores estão alocados no momento."}
 * * 304: {"value":{"error":304,"description":"DTV service not found"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas este contexto não se encontre na atual lista de canais do receptor."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvServiceContextIdAppsAppIdPersistentPost({
      body,
  serviceContextId,
  appid,
  varName,} = {}, bearerAuth, options) {
      

  if( serviceContextId == null) {
    throw new Error('Missing required parameter : serviceContextId. Value : ' +  serviceContextId);
  }

  if( appid == null) {
    throw new Error('Missing required parameter : appid. Value : ' +  appid);
  }

  if( varName == null) {
    throw new Error('Missing required parameter : varName. Value : ' +  varName);
  }


  let urlParts = [
    'dtv',
    serviceContextId,
    'apps',
    appid,
    'persistent',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = body;
    

  
  if(varName !== undefined) {
    data['var-name'] = varName;
  }
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.post('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Leitura de valores persistidos por aplicações interativas (Ginga)
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.serviceContextId
 * Identificador do contexto do serviço.,
 * @param {string} [parameters.varName]
 * Nome da variável persistente.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * oneOf: [{"type":"object","properties":{"persistentData":{"type":"array","items":{"type":"object","properties":{"name":{"type":"string","description":"Nome da variável persistente."},"value":{"type":"string","description":"Valor da variável persistente."}}}}}},{"type":"string","description":"Valor da variável persistente (quando var-name é especificado)."}]
 * @response 404
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 300: {"value":{"error":300,"description":"No DTV service currently in use"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas o receptor não esteja sintonizado em um serviço DTV no momento. Por exemplo, se sua entrada estiver confgurada como HDMI, USB etc., ou se outra função estiver se sobrepondo à sintonia e exibição do serviço DTV."}
 * * 302: {"value":{"error":302,"description":"No DTV signal"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas não haja recepção de sinal DTV."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvServiceContextIdGingaPersistentGet({
  serviceContextId,
  varName,} = {}, bearerAuth, options) {
      

  if( serviceContextId == null) {
    throw new Error('Missing required parameter : serviceContextId. Value : ' +  serviceContextId);
  }


  let urlParts = [
    'dtv',
    serviceContextId,
    'ginga',
    'persistent',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  if(varName !== undefined) {
    data['var-name'] = varName;
  }
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Escrita de valores na área de persistência de aplicações interativas (Ginga)
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {string} parameters.serviceContextId
 * Identificador do contexto do serviço.,
 * @param {string} parameters.varName
 * Nome da variável persistente.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"name":{"type":"string","description":"Nome da variável persistente."},"value":{"type":"string","description":"Valor da variável persistente."}}
 * @response 404
 * * 101: {"value":{"error":101,"description":"Illegal argument value"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros passados com valor inválido, pertencentes a um dos seguintes tipos:  parâmetros posicionais (componentes da rota defnida na API);  parâmetros de query;  atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento considerado inválido deve ser listado ao fnal da string de descrição. Havendo mais de um argumento, estes devem ser separados por vírgula."}
 * * 105: {"value":{"error":105,"description":"Missing argument"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros faltantes, pertencentes a um dos seguintes tipos: parâmetros posicionais (componentes da rota defnida na API); parâmetros de query; atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento identifcado como faltante deve ser listado ao fnal da string de descrição. Havendo mais de um, os argumentos devem ser separados por vírgula."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 200: {"value":{"error":200,"description":"Platform resource unavailable"},"description":"Caso o acesso a uma API não possa ser concretizado, por depender de um recurso que não está disponível. Por exemplo, requisição de controle de um exibidor de mídia (ver 8.5.4) quando todos os exibidores estão alocados no momento."}
 * * 304: {"value":{"error":304,"description":"DTV service not found"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas este contexto não se encontre na atual lista de canais do receptor."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvServiceContextIdGingaPersistentPost({
      body,
  serviceContextId,
  varName,} = {}, bearerAuth, options) {
      

  if( serviceContextId == null) {
    throw new Error('Missing required parameter : serviceContextId. Value : ' +  serviceContextId);
  }

  if( varName == null) {
    throw new Error('Missing required parameter : varName. Value : ' +  varName);
  }


  let urlParts = [
    'dtv',
    serviceContextId,
    'ginga',
    'persistent',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = body;
    

  
  if(varName !== undefined) {
    data['var-name'] = varName;
  }
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.post('/'+urlParts.join('/'), headers, data)
}

    
/**
 * obtenção de arquivos
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.appId
 * Identificador do aplicativo.,
 * @param {string} [parameters.path]
 * Caminho do diretório ou arquivo que se deseja 
 acessar, a partir do diretório-base (base_directory do 
 ginga_application_location_descriptor) da aplicação. O uso 
 do caractere ‘/’ no início do path é opcional, e mesmo com seu uso deve ser retornado o path a partir do diretório-base

 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * format: "binary"
 * @response 404
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 300: {"value":{"error":300,"description":"No DTV service currently in use"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas o receptor não esteja sintonizado em um serviço DTV no momento. Por exemplo, se sua entrada estiver confgurada como HDMI, USB etc., ou se outra função estiver se sobrepondo à sintonia e exibição do serviço DTV."}
 * * 302: {"value":{"error":302,"description":"No DTV signal"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas não haja recepção de sinal DTV."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvCurrentServiceGetFiles({
  appId,
  path,} = {}, bearerAuth, options) {
      

  if( appId == null) {
    throw new Error('Missing required parameter : appId. Value : ' +  appId);
  }


  let urlParts = [
    'dtv',
    'current-service',
    'apps',
    appId,
    'files',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  if(path !== undefined) {
    data['path'] = path;
  }
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Acesso a arquivos em um carrossel DSM-CC
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.componentTag
 * Tag do componente DSM-CC.,
 * @param {string} parameters.carouselId
 * Identificador do carrossel DSM-CC.,
 * @param {string} [parameters.path]
 * Caminho do diretório ou arquivo que se deseja acessar.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "string"
 * * format: "binary"
 * @response 404
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 105: {"value":{"error":105,"description":"Missing argument"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros faltantes, pertencentes a um dos seguintes tipos: parâmetros posicionais (componentes da rota defnida na API); parâmetros de query; atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento identifcado como faltante deve ser listado ao fnal da string de descrição. Havendo mais de um, os argumentos devem ser separados por vírgula."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 200: {"value":{"error":200,"description":"Platform resource unavailable"},"description":"Caso o acesso a uma API não possa ser concretizado, por depender de um recurso que não está disponível. Por exemplo, requisição de controle de um exibidor de mídia (ver 8.5.4) quando todos os exibidores estão alocados no momento."}
 * * 300: {"value":{"error":300,"description":"No DTV service currently in use"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas o receptor não esteja sintonizado em um serviço DTV no momento. Por exemplo, se sua entrada estiver confgurada como HDMI, USB etc., ou se outra função estiver se sobrepondo à sintonia e exibição do serviço DTV."}
 * * 301: {"value":{"error":301,"description":"Service information cache unavailable"},"description":"Caso seja requisitado o acesso a APIs que obtêm tabelas e metadados SI/PSI de um contexto de serviço DTV (ver 8.4), porém não haja informações armazenadas em cache para este."}
 * * 302: {"value":{"error":302,"description":"No DTV signal"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas não haja recepção de sinal DTV."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvCurrentServiceDsmccFilesComponentTagCarouselIdGet({
  componentTag,
  carouselId,
  path,} = {}, bearerAuth, options) {
      

  if( componentTag == null) {
    throw new Error('Missing required parameter : componentTag. Value : ' +  componentTag);
  }

  if( carouselId == null) {
    throw new Error('Missing required parameter : carouselId. Value : ' +  carouselId);
  }


  let urlParts = [
    'dtv',
    'current-service',
    'dsmcc',
    'files',
    componentTag,
    carouselId,
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  if(path !== undefined) {
    data['path'] = path;
  }
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Registro para a recepção de stream events DSM-CC
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.carouselId
 * Identificador do carrossel DSM-CC.,
 * @param {string} [parameters.protocol]
 * Protocolo de comunicação (tcp ou websocket). O valor default é "tcp".
 * @return {Object}
 * The HTTP response
 * @response 200
 * * oneOf: [{"type":"object","properties":{"handle":{"type":"string","description":"Identificador gerado para o listener."},"host":{"type":"string","description":"Host do socket server."},"port":{"type":"integer","description":"Porta do socket server."}}},{"type":"object","properties":{"handle":{"type":"string","description":"Identificador gerado para o listener."},"url":{"type":"string","description":"URL do WebSocket."}}}]
 * @response 404
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 105: {"value":{"error":105,"description":"Missing argument"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros faltantes, pertencentes a um dos seguintes tipos: parâmetros posicionais (componentes da rota defnida na API); parâmetros de query; atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento identifcado como faltante deve ser listado ao fnal da string de descrição. Havendo mais de um, os argumentos devem ser separados por vírgula."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 200: {"value":{"error":200,"description":"Platform resource unavailable"},"description":"Caso o acesso a uma API não possa ser concretizado, por depender de um recurso que não está disponível. Por exemplo, requisição de controle de um exibidor de mídia (ver 8.5.4) quando todos os exibidores estão alocados no momento."}
 * * 300: {"value":{"error":300,"description":"No DTV service currently in use"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas o receptor não esteja sintonizado em um serviço DTV no momento. Por exemplo, se sua entrada estiver confgurada como HDMI, USB etc., ou se outra função estiver se sobrepondo à sintonia e exibição do serviço DTV."}
 * * 302: {"value":{"error":302,"description":"No DTV signal"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas não haja recepção de sinal DTV."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvCurrentServiceDsmccStreamEventsCarouselIdGet({
  carouselId,
  protocol,} = {}, bearerAuth, options) {
      

  if( carouselId == null) {
    throw new Error('Missing required parameter : carouselId. Value : ' +  carouselId);
  }


  let urlParts = [
    'dtv',
    'current-service',
    'dsmcc',
    'stream-events',
    carouselId,
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  if(protocol !== undefined) {
    data['protocol'] = protocol;
  }
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Cancelamento de filtro de stream events DSM-CC
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.handle
 * Identificador do listener (handle) a ser cancelado.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * @response 404
 * * 105: {"value":{"error":105,"description":"Missing argument"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros faltantes, pertencentes a um dos seguintes tipos: parâmetros posicionais (componentes da rota defnida na API); parâmetros de query; atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento identifcado como faltante deve ser listado ao fnal da string de descrição. Havendo mais de um, os argumentos devem ser separados por vírgula."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvCurrentServiceDsmccStreamEventsHandleDelete({
  handle,} = {}, bearerAuth, options) {
      

  if( handle == null) {
    throw new Error('Missing required parameter : handle. Value : ' +  handle);
  }


  let urlParts = [
    'dtv',
    'current-service',
    'dsmcc',
    'stream-events',
    handle,
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.delete('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Listar nós em um documento NCL
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.appid
 * ID da aplicação Ginga-NCL,
 * @param {string} [parameters.documentId]
 * ID do documento NCL a ser verificado,
 * @param {string} [parameters.compositeId]
 * ID do nó de composição contido no documento
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"nodes":{"type":"array","items":{"type":"object","properties":{"id":{"type":"string"},"type":{"type":"string","enum":["media","context","switch"]},"mimeType":{"type":"string"},"presentationEvent":{"type":"object","properties":{"state":{"type":"string","enum":["occurring","paused","sleeping"]},"occurrences":{"type":"integer"}},"required":["state","occurrences"]},"preparationEvent":{"type":"object","properties":{"prepared":{"type":"boolean"},"state":{"type":"string","enum":["occurring","paused","sleeping"]},"occurrences":{"type":"integer"}},"required":["prepared","state","occurrences"]},"interfaces":{"type":"array","items":{"type":"object","properties":{"id":{"type":"string"},"type":{"type":"string","enum":["area","property","port"]},"presentationEvent":{"type":"object","properties":{"state":{"type":"string","enum":["occurring","paused","sleeping"]},"occurrences":{"type":"integer"}},"required":["state","occurrences"]},"preparationEvent":{"type":"object","properties":{"prepared":{"type":"boolean"},"state":{"type":"string","enum":["occurring","paused","sleeping"]},"occurrences":{"type":"integer"}},"required":["prepared","state","occurrences"]}}}}}}}}
 * @response 404
 * * 101: {"value":{"error":101,"description":"Illegal argument value"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros passados com valor inválido, pertencentes a um dos seguintes tipos:  parâmetros posicionais (componentes da rota defnida na API);  parâmetros de query;  atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento considerado inválido deve ser listado ao fnal da string de descrição. Havendo mais de um argumento, estes devem ser separados por vírgula."}
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 105: {"value":{"error":105,"description":"Missing argument"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros faltantes, pertencentes a um dos seguintes tipos: parâmetros posicionais (componentes da rota defnida na API); parâmetros de query; atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento identifcado como faltante deve ser listado ao fnal da string de descrição. Havendo mais de um, os argumentos devem ser separados por vírgula."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 200: {"value":{"error":200,"description":"Platform resource unavailable"},"description":"Caso o acesso a uma API não possa ser concretizado, por depender de um recurso que não está disponível. Por exemplo, requisição de controle de um exibidor de mídia (ver 8.5.4) quando todos os exibidores estão alocados no momento."}
 * * 300: {"value":{"error":300,"description":"No DTV service currently in use"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas o receptor não esteja sintonizado em um serviço DTV no momento. Por exemplo, se sua entrada estiver confgurada como HDMI, USB etc., ou se outra função estiver se sobrepondo à sintonia e exibição do serviço DTV."}
 * * 302: {"value":{"error":302,"description":"No DTV signal"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas não haja recepção de sinal DTV."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvCurrentServiceAppsGetNodes({
  appid,
  documentId,
  compositeId,} = {}, bearerAuth, options) {
      

  if( appid == null) {
    throw new Error('Missing required parameter : appid. Value : ' +  appid);
  }


  let urlParts = [
    'dtv',
    'current-service',
    'apps',
    appid,
    'nodes',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  if(documentId !== undefined) {
    data['document-id'] = documentId;
  }

  if(compositeId !== undefined) {
    data['composite-id'] = compositeId;
  }
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Executar uma transição na máquina de estados de um nó
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {string} parameters.appid
 * ID da aplicação Ginga-NCL,
 * @param {string} parameters.documentId
 * ID do documento NCL a ser verificado,
 * @param {string} parameters.nodeId
 * ID do nó
 * @return {Object}
 * The HTTP response
 * @response 200
 * * id: "node1"
 * * type: "media"
 * * mimeType: "video/mp4"
 * * presentationEvent: {"state":"occurring","occurrences":1}
 * * preparationEvent: {"prepared":true,"state":"paused","occurrences":0}
 * * interfaces: [{"id":"interface1","type":"area","presentationEvent":{"state":"paused","occurrences":0},"preparationEvent":{"prepared":true,"state":"occurring","occurrences":1}}]
 * @response 404
 * * 101: {"value":{"error":101,"description":"Illegal argument value"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros passados com valor inválido, pertencentes a um dos seguintes tipos:  parâmetros posicionais (componentes da rota defnida na API);  parâmetros de query;  atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento considerado inválido deve ser listado ao fnal da string de descrição. Havendo mais de um argumento, estes devem ser separados por vírgula."}
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 105: {"value":{"error":105,"description":"Missing argument"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros faltantes, pertencentes a um dos seguintes tipos: parâmetros posicionais (componentes da rota defnida na API); parâmetros de query; atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento identifcado como faltante deve ser listado ao fnal da string de descrição. Havendo mais de um, os argumentos devem ser separados por vírgula."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 300: {"value":{"error":300,"description":"No DTV service currently in use"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas o receptor não esteja sintonizado em um serviço DTV no momento. Por exemplo, se sua entrada estiver confgurada como HDMI, USB etc., ou se outra função estiver se sobrepondo à sintonia e exibição do serviço DTV."}
 * * 302: {"value":{"error":302,"description":"No DTV signal"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas não haja recepção de sinal DTV."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvCurrentServiceAppsChangeDocumentidNode({
      body,
  appid,
  documentId,
  nodeId,} = {}, bearerAuth, options) {
      

  if( appid == null) {
    throw new Error('Missing required parameter : appid. Value : ' +  appid);
  }

  if( documentId == null) {
    throw new Error('Missing required parameter : documentId. Value : ' +  documentId);
  }

  if( nodeId == null) {
    throw new Error('Missing required parameter : nodeId. Value : ' +  nodeId);
  }


  let urlParts = [
    'dtv',
    'current-service',
    'apps',
    appid,
    'nodes',
    documentId,
    nodeId,
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = body;
    

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.post('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Executar uma transição na máquina de estados de um nó
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {string} parameters.appid
 * ID da aplicação Ginga-NCL,
 * @param {string} parameters.nodeId
 * ID do nó
 * @return {Object}
 * The HTTP response
 * @response 200
 * * id: "node1"
 * * type: "media"
 * * mimeType: "video/mp4"
 * * presentationEvent: {"state":"occurring","occurrences":1}
 * * preparationEvent: {"prepared":true,"state":"paused","occurrences":0}
 * * interfaces: [{"id":"interface1","type":"area","presentationEvent":{"state":"paused","occurrences":0},"preparationEvent":{"prepared":true,"state":"occurring","occurrences":1}}]
 * @response 404
 * * 101: {"value":{"error":101,"description":"Illegal argument value"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros passados com valor inválido, pertencentes a um dos seguintes tipos:  parâmetros posicionais (componentes da rota defnida na API);  parâmetros de query;  atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento considerado inválido deve ser listado ao fnal da string de descrição. Havendo mais de um argumento, estes devem ser separados por vírgula."}
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 105: {"value":{"error":105,"description":"Missing argument"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros faltantes, pertencentes a um dos seguintes tipos: parâmetros posicionais (componentes da rota defnida na API); parâmetros de query; atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento identifcado como faltante deve ser listado ao fnal da string de descrição. Havendo mais de um, os argumentos devem ser separados por vírgula."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 300: {"value":{"error":300,"description":"No DTV service currently in use"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas o receptor não esteja sintonizado em um serviço DTV no momento. Por exemplo, se sua entrada estiver confgurada como HDMI, USB etc., ou se outra função estiver se sobrepondo à sintonia e exibição do serviço DTV."}
 * * 302: {"value":{"error":302,"description":"No DTV signal"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas não haja recepção de sinal DTV."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvCurrentServiceAppsChangeNode({
      body,
  appid,
  nodeId,} = {}, bearerAuth, options) {
      

  if( appid == null) {
    throw new Error('Missing required parameter : appid. Value : ' +  appid);
  }

  if( nodeId == null) {
    throw new Error('Missing required parameter : nodeId. Value : ' +  nodeId);
  }


  let urlParts = [
    'dtv',
    'current-service',
    'apps',
    appid,
    'nodes',
    nodeId,
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = body;
    

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.post('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Reserva e liberação de teclas para uso por uma aplicação
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"keyset":{"type":"array","items":{"type":"string"},"description":"Lista de grupos e subgrupos de teclas reservados."}}
 * @response 404
 * * 106: {"value":{"error":106,"description":"API unavailable for this runtime environment"},"description":"Caso a API seja utilizada a partir de um tipo de cliente ao qual não está destinada. Por exemplo, quando uma API destinada a clientes locais associados é usada a partir de um cliente não local, ou de um cliente local stand-alone."}

 */
function dtvCurrentServiceGingaKeysetPost({
      body,} = {}, bearerAuth, options) {
      


  let urlParts = [
    'dtv',
    'current-service',
    'ginga',
    'keyset',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = body;
    

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.post('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Verificação da lista de teclas reservadas para a aplicação
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"keyset":{"type":"array","items":{"type":"string"},"description":"Lista de grupos e subgrupos de teclas reservados."}}
 * @response 404
 * * 106: {"value":{"error":106,"description":"API unavailable for this runtime environment"},"description":"Caso a API seja utilizada a partir de um tipo de cliente ao qual não está destinada. Por exemplo, quando uma API destinada a clientes locais associados é usada a partir de um cliente não local, ou de um cliente local stand-alone."}

 */
function dtvCurrentServiceGingaKeysetGet( bearerAuth, options) {
      


  let urlParts = [
    'dtv',
    'current-service',
    'ginga',
    'keyset',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Envio de comandos de edição a uma aplicação Ginga-NCL em execução
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {string} parameters.appid
 * Identificador da aplicação Ginga-NCL.,
 * @param {string} parameters.documentId
 * Identificador do documento NCL.,
 * @param {string} parameters.command
 * Comando de edição a ser executado.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"parentId":{"type":"string","description":"Identificador do nó pai."},"elementId":{"type":"string","description":"Identificador do elemento."}}
 * @response 404
 * * 101: {"value":{"error":101,"description":"Illegal argument value"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros passados com valor inválido, pertencentes a um dos seguintes tipos:  parâmetros posicionais (componentes da rota defnida na API);  parâmetros de query;  atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento considerado inválido deve ser listado ao fnal da string de descrição. Havendo mais de um argumento, estes devem ser separados por vírgula."}
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 105: {"value":{"error":105,"description":"Missing argument"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros faltantes, pertencentes a um dos seguintes tipos: parâmetros posicionais (componentes da rota defnida na API); parâmetros de query; atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento identifcado como faltante deve ser listado ao fnal da string de descrição. Havendo mais de um, os argumentos devem ser separados por vírgula."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 300: {"value":{"error":300,"description":"No DTV service currently in use"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas o receptor não esteja sintonizado em um serviço DTV no momento. Por exemplo, se sua entrada estiver confgurada como HDMI, USB etc., ou se outra função estiver se sobrepondo à sintonia e exibição do serviço DTV."}
 * * 302: {"value":{"error":302,"description":"No DTV signal"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas não haja recepção de sinal DTV."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvCurrentServiceAppsEditDocumentidPost({
      body,
  appid,
  documentId,
  command,} = {}, bearerAuth, options) {
      

  if( appid == null) {
    throw new Error('Missing required parameter : appid. Value : ' +  appid);
  }

  if( documentId == null) {
    throw new Error('Missing required parameter : documentId. Value : ' +  documentId);
  }

  if( command == null) {
    throw new Error('Missing required parameter : command. Value : ' +  command);
  }


  let urlParts = [
    'dtv',
    'current-service',
    'apps',
    appid,
    'edit',
    documentId,
    command,
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = body;
    

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.post('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Envio de comandos de edição a uma aplicação Ginga-NCL em execução
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {string} parameters.appid
 * Identificador da aplicação Ginga-NCL.,
 * @param {string} parameters.command
 * Comando de edição a ser executado.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"parentId":{"type":"string","description":"Identificador do nó pai."},"elementId":{"type":"string","description":"Identificador do elemento."}}
 * @response 404
 * * 101: {"value":{"error":101,"description":"Illegal argument value"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros passados com valor inválido, pertencentes a um dos seguintes tipos:  parâmetros posicionais (componentes da rota defnida na API);  parâmetros de query;  atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento considerado inválido deve ser listado ao fnal da string de descrição. Havendo mais de um argumento, estes devem ser separados por vírgula."}
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 105: {"value":{"error":105,"description":"Missing argument"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros faltantes, pertencentes a um dos seguintes tipos: parâmetros posicionais (componentes da rota defnida na API); parâmetros de query; atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento identifcado como faltante deve ser listado ao fnal da string de descrição. Havendo mais de um, os argumentos devem ser separados por vírgula."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 300: {"value":{"error":300,"description":"No DTV service currently in use"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas o receptor não esteja sintonizado em um serviço DTV no momento. Por exemplo, se sua entrada estiver confgurada como HDMI, USB etc., ou se outra função estiver se sobrepondo à sintonia e exibição do serviço DTV."}
 * * 302: {"value":{"error":302,"description":"No DTV signal"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas não haja recepção de sinal DTV."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvCurrentServiceAppsEditPost({
      body,
  appid,
  command,} = {}, bearerAuth, options) {
      

  if( appid == null) {
    throw new Error('Missing required parameter : appid. Value : ' +  appid);
  }

  if( command == null) {
    throw new Error('Missing required parameter : command. Value : ' +  command);
  }


  let urlParts = [
    'dtv',
    'current-service',
    'apps',
    appid,
    'edit',
    command,
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = body;
    

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.post('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Obtenção da data e hora da emissora
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.serviceContextId
 * The context ID of the service.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"time":{"type":"string","format":"date-time","description":"Data e hora da emissora."}}
 * @response 404
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 300: {"value":{"error":300,"description":"No DTV service currently in use"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas o receptor não esteja sintonizado em um serviço DTV no momento. Por exemplo, se sua entrada estiver confgurada como HDMI, USB etc., ou se outra função estiver se sobrepondo à sintonia e exibição do serviço DTV."}
 * * 302: {"value":{"error":302,"description":"No DTV signal"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas não haja recepção de sinal DTV."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvServiceContextIdInfoTimeGet({
  serviceContextId,} = {}, bearerAuth, options) {
      

  if( serviceContextId == null) {
    throw new Error('Missing required parameter : serviceContextId. Value : ' +  serviceContextId);
  }


  let urlParts = [
    'dtv',
    serviceContextId,
    'info',
    'time',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Obtenção dos dados da tabela NIT
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.serviceContextId
 * The context ID of the service.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"desc":{"type":"string","description":"ver ABNT NBR 15603-2"}}
 * @response 404
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 301: {"value":{"error":301,"description":"Service information cache unavailable"},"description":"Caso seja requisitado o acesso a APIs que obtêm tabelas e metadados SI/PSI de um contexto de serviço DTV (ver 8.4), porém não haja informações armazenadas em cache para este."}
 * * 304: {"value":{"error":304,"description":"DTV service not found"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas este contexto não se encontre na atual lista de canais do receptor."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvServiceContextIdInfoNitGet({
  serviceContextId,} = {}, bearerAuth, options) {
      

  if( serviceContextId == null) {
    throw new Error('Missing required parameter : serviceContextId. Value : ' +  serviceContextId);
  }


  let urlParts = [
    'dtv',
    serviceContextId,
    'info',
    'nit',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Obtenção dos dados da tabela SDT
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.serviceContextId
 * The context ID of the service.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"desc":{"type":"string","description":"ver ABNT NBR 15603-2"}}
 * @response 404
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 301: {"value":{"error":301,"description":"Service information cache unavailable"},"description":"Caso seja requisitado o acesso a APIs que obtêm tabelas e metadados SI/PSI de um contexto de serviço DTV (ver 8.4), porém não haja informações armazenadas em cache para este."}
 * * 304: {"value":{"error":304,"description":"DTV service not found"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas este contexto não se encontre na atual lista de canais do receptor."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvServiceContextIdInfoSdtGet({
  serviceContextId,} = {}, bearerAuth, options) {
      

  if( serviceContextId == null) {
    throw new Error('Missing required parameter : serviceContextId. Value : ' +  serviceContextId);
  }


  let urlParts = [
    'dtv',
    serviceContextId,
    'info',
    'sdt',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Obtenção dos dados da tabela PAT
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.serviceContextId
 * The context ID of the service.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"desc":{"type":"string","description":"ver ABNT NBR 15603-2"}}
 * @response 404
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 301: {"value":{"error":301,"description":"Service information cache unavailable"},"description":"Caso seja requisitado o acesso a APIs que obtêm tabelas e metadados SI/PSI de um contexto de serviço DTV (ver 8.4), porém não haja informações armazenadas em cache para este."}
 * * 304: {"value":{"error":304,"description":"DTV service not found"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas este contexto não se encontre na atual lista de canais do receptor."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvServiceContextIdInfoPatGet({
  serviceContextId,} = {}, bearerAuth, options) {
      

  if( serviceContextId == null) {
    throw new Error('Missing required parameter : serviceContextId. Value : ' +  serviceContextId);
  }


  let urlParts = [
    'dtv',
    serviceContextId,
    'info',
    'pat',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Obtenção dos dados da tabela BAT
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.serviceContextId
 * The context ID of the service.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"desc":{"type":"string","description":"ver ABNT NBR 15603-2"}}
 * @response 404
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 301: {"value":{"error":301,"description":"Service information cache unavailable"},"description":"Caso seja requisitado o acesso a APIs que obtêm tabelas e metadados SI/PSI de um contexto de serviço DTV (ver 8.4), porém não haja informações armazenadas em cache para este."}
 * * 304: {"value":{"error":304,"description":"DTV service not found"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas este contexto não se encontre na atual lista de canais do receptor."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvServiceContextIdInfoBatGet({
  serviceContextId,} = {}, bearerAuth, options) {
      

  if( serviceContextId == null) {
    throw new Error('Missing required parameter : serviceContextId. Value : ' +  serviceContextId);
  }


  let urlParts = [
    'dtv',
    serviceContextId,
    'info',
    'bat',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Obtenção dos dados da tabela PMT
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.serviceContextId
 * The context ID of the service.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"desc":{"type":"string","description":"ver ABNT NBR 15603-2"}}
 * @response 404
 * * 101: {"value":{"error":101,"description":"Illegal argument value"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros passados com valor inválido, pertencentes a um dos seguintes tipos:  parâmetros posicionais (componentes da rota defnida na API);  parâmetros de query;  atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento considerado inválido deve ser listado ao fnal da string de descrição. Havendo mais de um argumento, estes devem ser separados por vírgula."}
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 301: {"value":{"error":301,"description":"Service information cache unavailable"},"description":"Caso seja requisitado o acesso a APIs que obtêm tabelas e metadados SI/PSI de um contexto de serviço DTV (ver 8.4), porém não haja informações armazenadas em cache para este."}
 * * 304: {"value":{"error":304,"description":"DTV service not found"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas este contexto não se encontre na atual lista de canais do receptor."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvServiceContextIdInfoPmtGet({
  serviceContextId,} = {}, bearerAuth, options) {
      

  if( serviceContextId == null) {
    throw new Error('Missing required parameter : serviceContextId. Value : ' +  serviceContextId);
  }


  let urlParts = [
    'dtv',
    serviceContextId,
    'info',
    'pmt',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Obtenção dos dados da grade de programação
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.serviceContextId
 * The context ID of the service.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"present":{"type":"array","items":{"type":"object","properties":{"desc":{"type":"string","description":"ver ABNT NBR 15603-2"}}},"description":"Informações sobre o evento atual (pode ser um array para eventos simultâneos)."},"following":{"type":"array","items":{"type":"object","properties":{"desc":{"type":"string","description":"ver ABNT NBR 15603-2"}}},"description":"Informações sobre o próximo evento (pode ser um array para eventos simultâneos)."},"schedule":{"type":"array","items":{"type":"object","properties":{"desc":{"type":"string","description":"ver ABNT NBR 15603-2"}}},"description":"Lista de informações sobre os próximos eventos."}}
 * @response 404
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 301: {"value":{"error":301,"description":"Service information cache unavailable"},"description":"Caso seja requisitado o acesso a APIs que obtêm tabelas e metadados SI/PSI de um contexto de serviço DTV (ver 8.4), porém não haja informações armazenadas em cache para este."}
 * * 304: {"value":{"error":304,"description":"DTV service not found"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas este contexto não se encontre na atual lista de canais do receptor."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvServiceContextIdInfoEpgGet({
  serviceContextId,} = {}, bearerAuth, options) {
      

  if( serviceContextId == null) {
    throw new Error('Missing required parameter : serviceContextId. Value : ' +  serviceContextId);
  }


  let urlParts = [
    'dtv',
    serviceContextId,
    'info',
    'epg',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Obtenção dos dados da grade de programação de todos os serviços
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"epgList":{"type":"array","items":{"type":"object","properties":{"serviceContextId":{"type":"string","description":"Identificador do contexto do serviço."},"present":{"type":"array","items":{"type":"object","properties":{"desc":{"type":"string","description":"ver ABNT NBR 15603-2"}}},"description":"Informações sobre o evento atual."},"following":{"type":"array","items":{"type":"object","properties":{"desc":{"type":"string","description":"ver ABNT NBR 15603-2"}}},"description":"Informações sobre o próximo evento."},"schedule":{"type":"array","items":{"type":"object","properties":{"desc":{"type":"string","description":"ver ABNT NBR 15603-2"}}},"description":"Lista de informações sobre os próximos eventos."}}}}}
 * @response 404
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 301: {"value":{"error":301,"description":"Service information cache unavailable"},"description":"Caso seja requisitado o acesso a APIs que obtêm tabelas e metadados SI/PSI de um contexto de serviço DTV (ver 8.4), porém não haja informações armazenadas em cache para este."}
 * * 303: {"value":{"error":303,"description":"Empty DTV channel list"},"description":"Caso uma API requisite recursos de um ou múltiplos contextos de serviço DTV, mas a atual lista de canais do receptor esteja vazia."}

 */
function dtvAllServicesInfoEpgGet( bearerAuth, options) {
      


  let urlParts = [
    'dtv',
    'all-services',
    'info',
    'epg',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Obtenção dos dados da tabela BIT
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.serviceContextId
 * The context ID of the service.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"desc":{"type":"string","description":"ver ABNT NBR 15603-2"}}
 * @response 404
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 301: {"value":{"error":301,"description":"Service information cache unavailable"},"description":"Caso seja requisitado o acesso a APIs que obtêm tabelas e metadados SI/PSI de um contexto de serviço DTV (ver 8.4), porém não haja informações armazenadas em cache para este."}
 * * 304: {"value":{"error":304,"description":"DTV service not found"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas este contexto não se encontre na atual lista de canais do receptor."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvServiceContextIdInfoBitGet({
  serviceContextId,} = {}, bearerAuth, options) {
      

  if( serviceContextId == null) {
    throw new Error('Missing required parameter : serviceContextId. Value : ' +  serviceContextId);
  }


  let urlParts = [
    'dtv',
    serviceContextId,
    'info',
    'bit',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Acesso direto a um stream
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"handle":{"type":"string","description":"Identificador gerado para o stream."},"streamUrl":{"type":"string","description":"URL do stream."},"mimeType":{"type":"string","description":"Tipo MIME do stream."}}
 * @response 404
 * * 101: {"value":{"error":101,"description":"Illegal argument value"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros passados com valor inválido, pertencentes a um dos seguintes tipos:  parâmetros posicionais (componentes da rota defnida na API);  parâmetros de query;  atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento considerado inválido deve ser listado ao fnal da string de descrição. Havendo mais de um argumento, estes devem ser separados por vírgula."}
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 105: {"value":{"error":105,"description":"Missing argument"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros faltantes, pertencentes a um dos seguintes tipos: parâmetros posicionais (componentes da rota defnida na API); parâmetros de query; atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento identifcado como faltante deve ser listado ao fnal da string de descrição. Havendo mais de um, os argumentos devem ser separados por vírgula."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 200: {"value":{"error":200,"description":"Platform resource unavailable"},"description":"Caso o acesso a uma API não possa ser concretizado, por depender de um recurso que não está disponível. Por exemplo, requisição de controle de um exibidor de mídia (ver 8.5.4) quando todos os exibidores estão alocados no momento."}
 * * 300: {"value":{"error":300,"description":"No DTV service currently in use"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas o receptor não esteja sintonizado em um serviço DTV no momento. Por exemplo, se sua entrada estiver confgurada como HDMI, USB etc., ou se outra função estiver se sobrepondo à sintonia e exibição do serviço DTV."}
 * * 302: {"value":{"error":302,"description":"No DTV signal"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas não haja recepção de sinal DTV."}

 */
function dtvCurrentServiceStreamPost({
      body,} = {}, bearerAuth, options) {
      


  let urlParts = [
    'dtv',
    'current-service',
    'stream',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = body;
    

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.post('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Obtenção dos exibidores de mídia disponíveis
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"players":{"type":"array","items":{"type":"object","properties":{"id":{"type":"string","description":"Identificador do exibidor de mídia."},"currentMedia":{"type":"string","description":"URL da mídia sendo reproduzida."},"state":{"type":"string","description":"Estado atual do exibidor de mídia.","enum":["preparing","prepared","playing","paused","stopped","idle"]},"schemesSupported":{"type":"array","items":{"type":"string"},"description":"Esquemas de URL suportados."},"formatsSupported":{"type":"array","items":{"type":"string"},"description":"Formatos de mídia suportados."},"codecsSupported":{"type":"object","properties":{"video":{"type":"array","items":{"type":"string"}},"audio":{"type":"array","items":{"type":"string"}},"subtitle":{"type":"array","items":{"type":"string"}}}},"drmsSupported":{"type":"array","items":{"type":"string"},"description":"Sistemas de DRM suportados."},"pos":{"type":"object","properties":{"x":{"type":"integer"},"y":{"type":"integer"},"w":{"type":"integer"},"h":{"type":"integer"}},"description":"Posição e tamanho do vídeo."},"vol":{"type":"integer","description":"Volume."},"currTime":{"type":"integer","description":"Tempo atual em milissegundos."},"duration":{"type":"integer","description":"Duração total em milissegundos."}}}}}
 * @response 404
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}

 */
function dtvMediaplayersGet( bearerAuth, options) {
      


  let urlParts = [
    'dtv',
    'mediaplayers',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Obtenção das informações de um exibidor de mídia específico
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.playerId
 * Identificador do exibidor de mídia.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"id":{"type":"string","description":"Identificador do exibidor de mídia."},"currentMedia":{"type":"string","description":"URL da mídia sendo reproduzida."},"state":{"type":"string","description":"Estado atual do exibidor de mídia.","enum":["preparing","prepared","playing","paused","stopped","idle"]},"schemesSupported":{"type":"array","items":{"type":"string"},"description":"Esquemas de URL suportados."},"formatsSupported":{"type":"array","items":{"type":"string"},"description":"Formatos de mídia suportados."},"codecsSupported":{"type":"object","properties":{"video":{"type":"array","items":{"type":"string"}},"audio":{"type":"array","items":{"type":"string"}},"subtitle":{"type":"array","items":{"type":"string"}}}},"drmsSupported":{"type":"array","items":{"type":"string"},"description":"Sistemas de DRM suportados."},"pos":{"type":"object","properties":{"x":{"type":"integer"},"y":{"type":"integer"},"w":{"type":"integer"},"h":{"type":"integer"}},"description":"Posição e tamanho do vídeo."},"vol":{"type":"integer","description":"Volume."},"currTime":{"type":"integer","description":"Tempo atual em milissegundos."},"duration":{"type":"integer","description":"Duração total em milissegundos."}}
 * @response 404
 * * 101: {"value":{"error":101,"description":"Illegal argument value"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros passados com valor inválido, pertencentes a um dos seguintes tipos:  parâmetros posicionais (componentes da rota defnida na API);  parâmetros de query;  atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento considerado inválido deve ser listado ao fnal da string de descrição. Havendo mais de um argumento, estes devem ser separados por vírgula."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}

 */
function dtvMediaplayersplayerIdGet({
  playerId,} = {}, bearerAuth, options) {
      

  if( playerId == null) {
    throw new Error('Missing required parameter : playerId. Value : ' +  playerId);
  }


  let urlParts = [
    'dtv',
    'mediaplayers',
    playerId,
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Controle de um exibidor de mídia específico
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {string} parameters.playerId
 * Identificador do exibidor de mídia.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"id":{"type":"string","description":"Identificador do exibidor de mídia."},"currentMedia":{"type":"string","description":"URL da mídia sendo reproduzida."},"state":{"type":"string","description":"Estado atual do exibidor de mídia.","enum":["preparing","prepared","playing","paused","stopped","idle"]},"schemesSupported":{"type":"array","items":{"type":"string"},"description":"Esquemas de URL suportados."},"formatsSupported":{"type":"array","items":{"type":"string"},"description":"Formatos de mídia suportados."},"codecsSupported":{"type":"object","properties":{"video":{"type":"array","items":{"type":"string"}},"audio":{"type":"array","items":{"type":"string"}},"subtitle":{"type":"array","items":{"type":"string"}}}},"drmsSupported":{"type":"array","items":{"type":"string"},"description":"Sistemas de DRM suportados."},"pos":{"type":"object","properties":{"x":{"type":"integer"},"y":{"type":"integer"},"w":{"type":"integer"},"h":{"type":"integer"}},"description":"Posição e tamanho do vídeo."},"vol":{"type":"integer","description":"Volume."},"currTime":{"type":"integer","description":"Tempo atual em milissegundos."},"duration":{"type":"integer","description":"Duração total em milissegundos."}}
 * @response 404
 * * 101: {"value":{"error":101,"description":"Illegal argument value"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros passados com valor inválido, pertencentes a um dos seguintes tipos:  parâmetros posicionais (componentes da rota defnida na API);  parâmetros de query;  atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento considerado inválido deve ser listado ao fnal da string de descrição. Havendo mais de um argumento, estes devem ser separados por vírgula."}
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 105: {"value":{"error":105,"description":"Missing argument"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros faltantes, pertencentes a um dos seguintes tipos: parâmetros posicionais (componentes da rota defnida na API); parâmetros de query; atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento identifcado como faltante deve ser listado ao fnal da string de descrição. Havendo mais de um, os argumentos devem ser separados por vírgula."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}
 * * 200: {"value":{"error":200,"description":"Platform resource unavailable"},"description":"Caso o acesso a uma API não possa ser concretizado, por depender de um recurso que não está disponível. Por exemplo, requisição de controle de um exibidor de mídia (ver 8.5.4) quando todos os exibidores estão alocados no momento."}
 * * 201: {"value":{"error":201,"description":"Format not supported"},"description":"Caso uma API seja invocada com tipos de mídia não suportados/não anunciados por chamadas relacionadas."}
 * * 202: {"value":{"error":202,"description":"Action not supported"},"description":"Caso uma dada ação não seja suportada por um tipo específco de mídia."}
 * * 203: {"value":{"error":203,"description":"Parameter not supported"},"description":"Caso um ou mais parâmetros não suportados por um dado tipo de mídia sejam utilizados."}
 * * 300: {"value":{"error":300,"description":"No DTV service currently in use"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas o receptor não esteja sintonizado em um serviço DTV no momento. Por exemplo, se sua entrada estiver confgurada como HDMI, USB etc., ou se outra função estiver se sobrepondo à sintonia e exibição do serviço DTV."}
 * * 301: {"value":{"error":301,"description":"Service information cache unavailable"},"description":"Caso seja requisitado o acesso a APIs que obtêm tabelas e metadados SI/PSI de um contexto de serviço DTV (ver 8.4), porém não haja informações armazenadas em cache para este."}
 * * 302: {"value":{"error":302,"description":"No DTV signal"},"description":"Caso uma API requisite recursos de um contexto de serviço DTV (ou acesso ao seu estado corrente), mas não haja recepção de sinal DTV."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}
 * * 400: {"value":{"error":400,"description":"Network service unavailable"},"description":"Caso um recurso de rede seja requisitado, e não haja canal de retorno habilitado ou conectividade à Internet. Por exemplo, se, nessas condições, for utilizada a API em 8.5.4 para requisitar o acesso a um exibidor de mídia para reproduzir um stream oriundo da Internet."}

 */
function dtvMediaplayersMediaplayerIdPost({
      body,
  playerId,} = {}, bearerAuth, options) {
      

  if( playerId == null) {
    throw new Error('Missing required parameter : playerId. Value : ' +  playerId);
  }


  let urlParts = [
    'dtv',
    'mediaplayers',
    playerId,
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = body;
    

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.post('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Liberação de um recurso de stream
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.handle
 * Identificador do recurso de stream (handle) a ser liberado.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * @response 404
 * * 105: {"value":{"error":105,"description":"Missing argument"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros faltantes, pertencentes a um dos seguintes tipos: parâmetros posicionais (componentes da rota defnida na API); parâmetros de query; atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento identifcado como faltante deve ser listado ao fnal da string de descrição. Havendo mais de um, os argumentos devem ser separados por vírgula."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 305: {"value":{"error":305,"description":"DTV resource not found"},"description":"Caso seja requisitado um recurso oriundo do sinal DTV (tabela, elementary stream etc.), mas este sinal não tenha sido encontrado por meio da identifcação fornecida."}

 */
function dtvCurrentServiceStreamHandleDelete({
  handle,} = {}, bearerAuth, options) {
      

  if( handle == null) {
    throw new Error('Missing required parameter : handle. Value : ' +  handle);
  }


  let urlParts = [
    'dtv',
    'current-service',
    'stream',
    handle,
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.delete('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Consulta a características, capacidades e recursos da plataforma
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"screenSize":{"type":"string","description":"Tamanho físico da tela (e.g., '42 inches')."},"displayResolutions":{"type":"array","items":{"type":"string","description":"Resoluções suportadas pelas camadas de exibição (e.g., '1920x1080')."}},"inputDevices":{"type":"array","items":{"type":"string","description":"Tipos de dispositivos de entrada suportados (e.g., 'remote', 'keyboard', 'mouse')."}},"networkInterfaces":{"type":"array","items":{"type":"string","description":"Tipos de interfaces de rede suportadas (e.g., 'Ethernet', 'Wi-Fi')."}},"tuners":{"type":"array","items":{"type":"string","description":"Tipos de sintonizadores suportados (e.g., 'DVB-T', 'DVB-S', 'ATSC')."}},"codecs":{"type":"array","items":{"type":"string","description":"Codecs de áudio e vídeo suportados (e.g., 'MPEG-2', 'H.264', 'AAC')."}},"storageCapacity":{"type":"integer","description":"Capacidade de armazenamento disponível em bytes."},"memoryCapacity":{"type":"integer","description":"Capacidade de memória RAM disponível em bytes."},"operatingSystem":{"type":"string","description":"Sistema operacional da plataforma (e.g., 'Ginga Linux')."}}
 * @response 404
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}

 */
function dtvPlatformCapabilitiesGet( bearerAuth, options) {
      


  let urlParts = [
    'dtv',
    'platform-capabilities',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Consulta a sistemas de DRM suportados na plataforma
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"systems":{"type":"array","items":{"type":"object","properties":{"name":{"type":"string","description":"Nome do sistema DRM (e.g., 'PlayReady')."},"library":{"type":"string","description":"Nome da biblioteca utilizada para decodificação (e.g., 'libplayready')."},"version":{"type":"string","description":"Versão da biblioteca DRM."}}}}}
 * @response 404
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}

 */
function dtvDrmGet( bearerAuth, options) {
      


  let urlParts = [
    'dtv',
    'drm',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Registro de filtros para aplicações-alvo
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"targetId":{"type":"string","description":"Identificador único da aplicação-alvo."},"state":{"type":"string","description":"Estado atual da aplicação-alvo (e.g., 'running', 'stopped').","enum":["starting","running","stopping","stopped","pausing","paused"]},"urlFilters":{"type":"array","items":{"type":"string","description":"Filtros de URL no formato '<scheme>://<host>/<path>'."}}}
 * * required: ["targetId","state"]
 * @response 404
 * * 101: {"value":{"error":101,"description":"Illegal argument value"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros passados com valor inválido, pertencentes a um dos seguintes tipos:  parâmetros posicionais (componentes da rota defnida na API);  parâmetros de query;  atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento considerado inválido deve ser listado ao fnal da string de descrição. Havendo mais de um argumento, estes devem ser separados por vírgula."}
 * * 105: {"value":{"error":105,"description":"Missing argument"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros faltantes, pertencentes a um dos seguintes tipos: parâmetros posicionais (componentes da rota defnida na API); parâmetros de query; atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento identifcado como faltante deve ser listado ao fnal da string de descrição. Havendo mais de um, os argumentos devem ser separados por vírgula."}
 * * 106: {"value":{"error":106,"description":"API unavailable for this runtime environment"},"description":"Caso a API seja utilizada a partir de um tipo de cliente ao qual não está destinada. Por exemplo, quando uma API destinada a clientes locais associados é usada a partir de um cliente não local, ou de um cliente local stand-alone."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}

 */
function dtvRegisterTargetPost({
      body,} = {},  options) {
      


  let urlParts = [
    'dtv',
    'register-target',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = body;
    

  
  let fetchWrapper = new FetchWrapper()
  return fetchWrapper.post('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Listagem das aplicações-alvo instaladas no receptor
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.targetId
 * Identificador da aplicação-alvo.,
 * @param {string} parameters.url
 * URL a ser testada em busca de aplicações com filtros compatíveis registrados.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "array"
 * * items: {"type":"object","properties":{"targetId":{"type":"string","description":"Identificador único da aplicação-alvo."},"state":{"type":"string","description":"Estado atual da aplicação-alvo (e.g., 'running', 'stopped').","enum":["starting","running","stopping","stopped","pausing","paused"]},"urlFilters":{"type":"array","items":{"type":"string","description":"Filtros de URL no formato '<scheme>://<host>/<path>'."}}},"required":["targetId","state"]}
 * @response 404
 * * 101: {"value":{"error":101,"description":"Illegal argument value"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros passados com valor inválido, pertencentes a um dos seguintes tipos:  parâmetros posicionais (componentes da rota defnida na API);  parâmetros de query;  atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento considerado inválido deve ser listado ao fnal da string de descrição. Havendo mais de um argumento, estes devem ser separados por vírgula."}
 * * 105: {"value":{"error":105,"description":"Missing argument"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros faltantes, pertencentes a um dos seguintes tipos: parâmetros posicionais (componentes da rota defnida na API); parâmetros de query; atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento identifcado como faltante deve ser listado ao fnal da string de descrição. Havendo mais de um, os argumentos devem ser separados por vírgula."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}

 */
function dtvTargetAppsTargetIdGet({
  targetId,
  url,} = {}, bearerAuth, options) {
      

  if( targetId == null) {
    throw new Error('Missing required parameter : targetId. Value : ' +  targetId);
  }

  if( url == null) {
    throw new Error('Missing required parameter : url. Value : ' +  url);
  }


  let urlParts = [
    'dtv',
    'target-apps',
    targetId,
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  if(url !== undefined) {
    data['url'] = url;
  }
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Listagem das aplicações-alvo instaladas no receptor
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.url
 * URL a ser testada em busca de aplicações com filtros compatíveis registrados.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "array"
 * * items: {"type":"object","properties":{"targetId":{"type":"string","description":"Identificador único da aplicação-alvo."},"state":{"type":"string","description":"Estado atual da aplicação-alvo (e.g., 'running', 'stopped').","enum":["starting","running","stopping","stopped","pausing","paused"]},"urlFilters":{"type":"array","items":{"type":"string","description":"Filtros de URL no formato '<scheme>://<host>/<path>'."}}},"required":["targetId","state"]}
 * @response 404
 * * 101: {"value":{"error":101,"description":"Illegal argument value"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros passados com valor inválido, pertencentes a um dos seguintes tipos:  parâmetros posicionais (componentes da rota defnida na API);  parâmetros de query;  atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento considerado inválido deve ser listado ao fnal da string de descrição. Havendo mais de um argumento, estes devem ser separados por vírgula."}
 * * 105: {"value":{"error":105,"description":"Missing argument"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros faltantes, pertencentes a um dos seguintes tipos: parâmetros posicionais (componentes da rota defnida na API); parâmetros de query; atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento identifcado como faltante deve ser listado ao fnal da string de descrição. Havendo mais de um, os argumentos devem ser separados por vírgula."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}

 */
function dtvTargetAppsdGet({
  url,} = {}, bearerAuth, options) {
      

  if( url == null) {
    throw new Error('Missing required parameter : url. Value : ' +  url);
  }


  let urlParts = [
    'dtv',
    'target-apps',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  if(url !== undefined) {
    data['url'] = url;
  }
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Execução de uma aplicação-alvo
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"targetId":{"type":"string","description":"Identificador único da aplicação-alvo."},"state":{"type":"string","description":"Estado atual da aplicação-alvo (e.g., 'running', 'stopped').","enum":["starting","running","stopping","stopped","pausing","paused"]},"urlFilters":{"type":"array","items":{"type":"string","description":"Filtros de URL no formato '<scheme>://<host>/<path>'."}}}
 * * required: ["targetId","state"]
 * @response 404
 * * 101: {"value":{"error":101,"description":"Illegal argument value"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros passados com valor inválido, pertencentes a um dos seguintes tipos:  parâmetros posicionais (componentes da rota defnida na API);  parâmetros de query;  atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento considerado inválido deve ser listado ao fnal da string de descrição. Havendo mais de um argumento, estes devem ser separados por vírgula."}
 * * 102: {"value":{"error":102,"description":"Access not authorized by user"},"description":"Caso o processo de autorização e pareamento (feito por meio da API em 8.1.1) não tenha sido concluído com sucesso, ou o usuário tenha dado resposta negativa, ou uma anuência previamente concedida tenha sido posteriormente excluída (por meio do mecanismo descrito em 7.2.1). Outros casos de uso que possam requerer autorização imediata do usuário (por exemplo, 8.6.5) devem retornar este erro, caso a autorização seja negada."}
 * * 105: {"value":{"error":105,"description":"Missing argument"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros faltantes, pertencentes a um dos seguintes tipos: parâmetros posicionais (componentes da rota defnida na API); parâmetros de query; atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento identifcado como faltante deve ser listado ao fnal da string de descrição. Havendo mais de um, os argumentos devem ser separados por vírgula."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 200: {"value":{"error":200,"description":"Platform resource unavailable"},"description":"Caso o acesso a uma API não possa ser concretizado, por depender de um recurso que não está disponível. Por exemplo, requisição de controle de um exibidor de mídia (ver 8.5.4) quando todos os exibidores estão alocados no momento."}
 * * 400: {"value":{"error":400,"description":"Network service unavailable"},"description":"Caso um recurso de rede seja requisitado, e não haja canal de retorno habilitado ou conectividade à Internet. Por exemplo, se, nessas condições, for utilizada a API em 8.5.4 para requisitar o acesso a um exibidor de mídia para reproduzir um stream oriundo da Internet."}
 * * 401: {"value":{"error":401,"description":"Unsupported or invalid state transition"},"description":"Caso uma transição de estado requisitada a uma aplicação-alvo não seja válida, ou não possa ser realizada."}
 * * 402: {"value":{"error":402,"description":"Unsupported or invalid priority transition"},"description":"Caso uma transição de prioridade requisitada a uma aplicação-alvo não seja válida, ou não possa ser realizada."}
 * * 403: {"value":{"error":403,"description":"Unhandled URL scheme"},"description":"Caso haja tentativa de executar um deep link para o qual não há nenhuma aplicação-alvo capaz de tratar."}

 */
function dtvTargetAppsPost({
      body,} = {}, bearerAuth, options) {
      


  let urlParts = [
    'dtv',
    'target-apps',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = body;
    

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.post('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Consulta de um deep link
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.targetId
 * Identificador da aplicação-alvo.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"url":{"type":"string","description":"Deep link URL."}}
 * @response 404
 * * 101: {"value":{"error":101,"description":"Illegal argument value"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros passados com valor inválido, pertencentes a um dos seguintes tipos:  parâmetros posicionais (componentes da rota defnida na API);  parâmetros de query;  atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento considerado inválido deve ser listado ao fnal da string de descrição. Havendo mais de um argumento, estes devem ser separados por vírgula."}
 * * 106: {"value":{"error":106,"description":"API unavailable for this runtime environment"},"description":"Caso a API seja utilizada a partir de um tipo de cliente ao qual não está destinada. Por exemplo, quando uma API destinada a clientes locais associados é usada a partir de um cliente não local, ou de um cliente local stand-alone."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 404: {"value":{"error":404,"description":"URL not found"},"description":"Caso uma consulta pela URL de ativação de deep link (para uma aplicação alvo) não retorne nenhum resultado."}

 */
function dtvDeepLinkTargetIdGet({
  targetId,} = {}, bearerAuth, options) {
      

  if( targetId == null) {
    throw new Error('Missing required parameter : targetId. Value : ' +  targetId);
  }


  let urlParts = [
    'dtv',
    'deep-link',
    targetId,
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Registro de contexto de serviço para uso de APIs Ginga CC WebServices
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.bindToken
 * JWT token para autorização.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"serviceContextId":{"type":"string","description":"Identificador do contexto de serviço."},"bindTokens":{"type":"array","items":{"type":"string"},"description":"Lista de tokens autorizados e válidos para uso no mesmo contexto."}}
 * @response 404
 * * 101: {"value":{"error":101,"description":"Illegal argument value"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros passados com valor inválido, pertencentes a um dos seguintes tipos:  parâmetros posicionais (componentes da rota defnida na API);  parâmetros de query;  atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento considerado inválido deve ser listado ao fnal da string de descrição. Havendo mais de um argumento, estes devem ser separados por vírgula."}
 * * 105: {"value":{"error":105,"description":"Missing argument"},"description":"Caso utilizada uma API REST válida, porém com um ou mais parâmetros faltantes, pertencentes a um dos seguintes tipos: parâmetros posicionais (componentes da rota defnida na API); parâmetros de query; atributos em objetos JSON passados no corpo de uma mensagem. O nome de cada argumento identifcado como faltante deve ser listado ao fnal da string de descrição. Havendo mais de um, os argumentos devem ser separados por vírgula."}
 * * 106: {"value":{"error":106,"description":"API unavailable for this runtime environment"},"description":"Caso a API seja utilizada a partir de um tipo de cliente ao qual não está destinada. Por exemplo, quando uma API destinada a clientes locais associados é usada a partir de um cliente não local, ou de um cliente local stand-alone."}

 */
function dtvBindContextPost({
  bindToken,} = {}, bearerAuth, options) {
      

  if( bindToken == null) {
    throw new Error('Missing required parameter : bindToken. Value : ' +  bindToken);
  }


  let urlParts = [
    'dtv',
    'bind-context',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.post('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Acesso a um contexto de serviço previamente vinculado
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.bindToken
 * JWT token para autorização.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "array"
 * * items: {"type":"object","properties":{"serviceContextId":{"type":"string","description":"The context ID of the service."},"serviceName":{"type":"string","description":"The name of the service."},"transportStreamId":{"type":"integer","description":"The ID of the transport stream."},"originalNetworkId":{"type":"integer","description":"The original network ID."},"serviceId":{"type":"integer","description":"The ID of the service."}},"required":["serviceContextId","serviceName","transportStreamId","originalNetworkId","serviceId"]}
 * @response 404
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 106: {"value":{"error":106,"description":"API unavailable for this runtime environment"},"description":"Caso a API seja utilizada a partir de um tipo de cliente ao qual não está destinada. Por exemplo, quando uma API destinada a clientes locais associados é usada a partir de um cliente não local, ou de um cliente local stand-alone."}
 * * 107: {"value":{"error":107,"description":"Invalid or outdated access token"},"description":"Caso qualquer API dependente do fuxo de autorização e pareamento, invocada a partir de um cliente não local ou cliente local stand-alone, seja utilizada com um valor inválido ou expirado de accessToken no cabeçalho da requisição. Para evitar este erro, a aplicação cliente deve sempre renovar o accessToken a partir da API correspondente, defnida em 8.1.2."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}

 */
function dtvBindContextGet({
  bindToken,} = {}, bearerAuth, options) {
      

  if( bindToken == null) {
    throw new Error('Missing required parameter : bindToken. Value : ' +  bindToken);
  }


  let urlParts = [
    'dtv',
    'bind-context',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.get('/'+urlParts.join('/'), headers, data)
}

    
/**
 * Revogação de token para uso de APIs Ginga CC WebServices
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.bindToken
 * JWT token para autorização.
 * @return {Object}
 * The HTTP response
 * @response 200
 * * type: "object"
 * * properties: {"serviceContextId":{"type":"string","description":"Identificador do contexto de serviço."},"bindTokens":{"type":"array","items":{"type":"string"},"description":"Lista de tokens autorizados e válidos para uso no mesmo contexto."}}
 * * required: ["serviceContextId","bindTokens"]
 * @response 404
 * * 104: {"value":{"error":104,"description":"Access not authorized by the broadcaster"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e este não seja incluído no cabeçalho da chamada."}
 * * 106: {"value":{"error":106,"description":"API unavailable for this runtime environment"},"description":"Caso a API seja utilizada a partir de um tipo de cliente ao qual não está destinada. Por exemplo, quando uma API destinada a clientes locais associados é usada a partir de um cliente não local, ou de um cliente local stand-alone."}
 * * 108: {"value":{"error":108,"description":"Invalid or revoked bind token"},"description":"Caso seja invocada uma API vinculada a um contexto de serviço DTV, que requeira o uso de um bind-token registrado pelo radiodifusor correspondente, e o mesmo esteja inválido, ou já tenha sido revogado pelo radiodifusor (ver 8.7.3)."}

 */
function dtvBindContextDelete({
  bindToken,} = {}, bearerAuth, options) {
      

  if( bindToken == null) {
    throw new Error('Missing required parameter : bindToken. Value : ' +  bindToken);
  }


  let urlParts = [
    'dtv',
    'bind-context',
  ];
  let headers = {
    'Content-Type': 'application/json',
    'Accept-Version': '1.0'
  };

  if (options) {
    headers = Object.assign({}, headers, options);
  } 

  let data = {
   }; 

  
  let fetchWrapper = new FetchWrapper(bearerAuth)
  return fetchWrapper.delete('/'+urlParts.join('/'), headers, data)
}

class FetchWrapper {
  constructor(authkey) {
    this.authkey = authkey;
    /*if(this.authkey)
      this.protocol = "https://"
    else
      this.protocol = "http://"*/
    this.host = API.host;
  }
  get(url, headers,params) {
    let queryString = '';
    if (params) {
        // Convert the params object to a query string
        queryString = Object.keys(params).map(function(key) {
            return key + '=' + params[key];
        }).join('&');
        queryString = '?' + queryString;
    }
    if (this.authkey) {
      headers['Authorization'] = `Bearer ${this.authkey}`;
    }
    let requestOptions = {
        method: 'GET',
        headers: headers
    };
    /*this.protocol +*/
    return fetch( this.host + url + queryString, requestOptions).then(this.handleResponse);
  }

  post(url, headers, body) {
    if (this.authkey) {
      headers['Authorization'] = 'Bearer ${this.authkey}';
    }
    let requestOptions = {
        method: 'POST',
        headers: headers,
        body: JSON.stringify(body)
    };
    return fetch(this.protocol + url, requestOptions).then(handleResponse);
  }

  put(url, headers, body) {
    if (this.authkey) {
      headers['Authorization'] = 'Bearer ${this.authkey}';
    }
    let requestOptions = {
        method: 'PUT',
        headers: headers,
        body: JSON.stringify(body)
    };
    return fetch(this.protocol + url, requestOptions).then(handleResponse);    
  }

// prefixed with underscored because delete is a reserved word in javascript
  _delete(url, headers) {
    if (this.authkey) {
      headers['Authorization'] = 'Bearer ${this.authkey}';
    }
    let requestOptions = {
        method: 'DELETE',
        headers: headers
    };
    return fetch(this.protocol + url, requestOptions).then(handleResponse);
  }

// helper functions

  handleResponse(response) {
    return response.text().then(function(text) {
       let data = text && JSON.parse(text);
        
        if (!response.ok) {
            return Promise.reject({error: data.error, description: data.description});
        }

        return data;
    });
  }
}
//module.exports = API;
export default API;
